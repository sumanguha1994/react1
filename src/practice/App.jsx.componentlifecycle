import React, { Component } from 'react';
import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';  
import logo from './logo.svg';
import './App.css';

class App extends React.Component {     
  constructor(props) {
    super(props);
    this.state = {hello: "javascript"};
    this.changeState = this.changeState.bind(this);
  }
  render() {
    return (
      <div>
        <h1>ReactJS component's Lifecycle</h1>  
        <h3>Hello {this.state.hello}</h3>
        <button onClick={this.changeState}>Click Here !</button>
      </div>
    )
  } 
  componentWillMount()
  {
    console.log("componentWillMount >> This is invoked immediately " +
                  "before a component gets rendered into the DOM. In the case, "+
                  "when you call setState() inside this method, the component will not re-render.");
  } 
  componentDidMount()
  {
    console.log("componentDidMount >> This is invoked immediately after a component gets " + 
                  "rendered and placed on the DOM. Now, you can do any DOM querying operations.");
  }
  changeState(){
    this.setState({hello: "WOW !!! this state been chnaged"});
  }
  componentWillRecieveProps(newprops)
  {
    console.log("componentWillRecieveProps >> It is invoked when a component receives new props. "+
                "If you want to update the state in response to prop changes, you should compare "+
                "this.props and nextProps to perform state transition by using this.setState() method.");
    console.log(newprops);
  }
  shouldComponentUpdate(newprops, newstate)
  {
    console.log("shouldComponentUpdate >> It is invoked when a component decides any changes/updation "+
                "to the DOM. It allows you to control the component's behavior of updating itself. "+
                "If this method returns true, the component will update. Otherwise, the component will skip the updating.");
    console.log(newprops);
    console.log(newstate);
    return true;
  }
  componentWillUpdate(nextProps, nextState)
  {
    console.log("componentWillUpdate >> It is invoked just before the component updating occurs. "+
                "Here, you can't change the component state by invoking this.setState() method. "+
                "It will not be called, if shouldComponentUpdate() returns false.");
    console.log(nextProps);
    console.log(nextState);
  }
  componentDidUpdate(prevProps, prevState)
  {
    console.log("componentDidUpdate >> It is invoked immediately after the component updating occurs. "+
                "In this method, you can put any code inside this which you want to execute once the "+
                "updating occurs. This method is not invoked for the initial render.");
    console.log(prevProps);
    console.log(prevState);
  }
  componentWillUnmount()
  {
    console.log("componentWillUnmount >> This method is invoked immediately before a component is destroyed"+
                " and unmounted permanently. It performs any necessary cleanup related task such as "+
                "invalidating timers, event listener, canceling network requests, or cleaning up DOM elements. "+
                "If a component instance is unmounted, you cannot mount it again.");
  }
} 

export default App;

